plugins {
    id 'java'
    id 'maven-publish'
    id "net.covers1624.signing" version '1.1.4'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

group = "codechicken"
archivesBaseName = "ChickenChunks"

sourceSets.main.resources.srcDirs += "src/main/generated"

file('build.properties').withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def signProps = [:]
if (System.getenv("KEY_STORE")) {
    println "Using Env variables for jar signing."
    signProps['keyStore'] = System.getenv("KEY_STORE")
    file(System.getenv("KEY_STORE_PROPS")).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println "Using Project properties for jar signing."
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

config.mod_version = "${config.mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")
version = "${config.mc_version}-${config.mod_version}"
println "Starting build of ${archivesBaseName}, Version: ${config.mod_version}"
println "Using Forge: ${config.forge_version}, for Minecraft: ${config.mc_version}, with Mappings: ${config.mappings}"

minecraft {
    mappings channel: 'official', version: config.mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { chickenchunks { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { chickenchunks { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'chickenchunks', '--all', '--output', file("src/main/generated"), '--existing', file("src/main/resources")
            mods { chickenchunks { source sourceSets.main } }
        }
    }
}

repositories {
    mavenLocal()
    maven { url = "https://chickenbones.net/maven" }
}

dependencies {
    minecraft "net.neoforged:forge:${config.mc_version}-${config.forge_version}"
    implementation fg.deobf("codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:universal")
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after 'reobfJar'

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

processResources {
    inputs.property 'mod_version', config.mod_version
    inputs.property 'mc_version', config.mc_version
    inputs.property 'ccl_version', config.ccl_version

    filesMatching('META-INF/mods.toml') {
        expand 'file': ['jarVersion': config.mod_version],
                'mc_version': config.mc_version,
                'forge_version': config.forge_version,
                'lang_version': config.forge_version.split('\\.')[0],
                'ccl_version_range': "[${config.ccl_version.replace(".+", "")},${config.ccl_version_max})"
    }
}

jar {
    finalizedBy 'reobfJar'
    archiveClassifier = 'universal'
    manifest {
        attributes 'Specification-Title': archivesBaseName
        attributes 'Specification-Vendor': 'covers1624'
        attributes 'Specification-Version': "1"
        attributes 'Implementation-Title': archivesBaseName
        attributes 'Implementation-Vendor': 'covers1624'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
    from file("LICENSE.txt")
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    from file("LICENSE.txt")
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        EnderStorage(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact srcJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesnt like GString's here apparently..
                url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                scm {
                    url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                    connection = "scm:git:git://github.com/TheCBProject/${archivesBaseName}.git".toString()
                    connection = "scm:git:git@github.com:TheCBProject/${archivesBaseName}.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/TheCBProject/${archivesBaseName}/issues".toString()
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/TheCBProject/ChickenChunks/master/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
                developers {
                    developer {
                        id = 'chicken-bones'
                        name = 'chicken-bones'
                    }
                }
            }
        }
    }
}
